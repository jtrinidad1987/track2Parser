/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package track2;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.io.*;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.*;
/**
 *
 * This application reads an XML containing name and Track 2 information
 * and parses it into a sortable JTable. It also allows the user to export
 * the table into a SQLite database.
 * 
 * @author Jason Trinidad
 * @version 1.0
 * @since 2015-10-07
 */
public class Track2ParserGUI extends javax.swing.JFrame {

    /**
     * Creates new form Track2ParserGUI
     */
    public Track2ParserGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        AddDataButton = new javax.swing.JButton();
        ExportButton = new javax.swing.JButton();
        exportLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dataTable.setAutoCreateRowSorter(true);
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Middle Name", "Last Name", "Account", "Exp. Month", "Exp. Year", "Service Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(dataTable);

        AddDataButton.setText("Add Data");
        AddDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDataButtonActionPerformed(evt);
            }
        });

        ExportButton.setText("Export to SQLite");
        ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExportButton)
                        .addGap(18, 18, 18)
                        .addComponent(exportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AddDataButton)
                        .addComponent(ExportButton))
                    .addComponent(exportLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    class User//class for managing data
    {
        String nameFirst;
        String nameMiddle;
        String nameLast;
        String track2;
        String account;
        String expMonth;
        String expYear;
        String serviceCode;
        
        public User(String nameFirst, String nameMiddle, String nameLast, String track2)
        {
            this.nameFirst = nameFirst;
            this.nameMiddle = nameMiddle;
            this.nameLast = nameLast;
            this.track2 = track2;
        }
        
        public String getNameFirst(){ return nameFirst;}
        public String getNameMiddle(){ return nameMiddle;}
        public String getNameLast(){ return nameLast;}
        public String getTrack2(){return track2;}
        
        public void setAccount(String account){this.account = account;}
        public String getAccount(){return account;}
        
        public void setExpMonth(String expMonth){this.expMonth = expMonth;}
        public String getExpMonth(){return expMonth;}
        
        public void setExpYear(String expYear){this.expYear = expYear;}
        public String getExpYear(){return expYear;}
        
        public void setServiceCode(String serviceCode){this.serviceCode = serviceCode;}
        public String getServiceCode(){return serviceCode;}
    }
    
    /*
    * parses the XML
    */
    private ArrayList parseXML(File file){
        
        ArrayList<User> arrayList = new ArrayList<User>();
        try
        {
            DocumentBuilderFactory dbFactory 
                = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(file); //parses xml file
            
            doc.getDocumentElement().normalize();
            NodeList nList = doc.getElementsByTagName("record");
            
            for (int temp = 0; temp < nList.getLength(); temp++)//for each record
            {
                Node nNode = nList.item(temp);//gets the following item in the list
                if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                   
                    Element eElement = (Element) nNode; //Cast current node as an Element
                    String name = eElement
                      .getElementsByTagName("name")
                      .item(0)
                      .getTextContent(); //extract name
                    String track2 = eElement
                      .getElementsByTagName("track2")
                      .item(0)
                      .getTextContent(); //extract track2 data
                   
                    String nameFirst = "", nameMiddle = "", nameLast = "";

                    nameFirst = name.substring(0,name.indexOf(" "));
                    name= name.substring(name.indexOf(" ")+1);
                    nameLast = name.substring(name.indexOf(" ") + 1,name.length());
                    if(name.indexOf(" ") != -1)//If middle name exists
                    {
                     name = name.substring(0 ,name.indexOf(" "));
                     nameMiddle = name;
                    }
                   arrayList.add(new User(nameFirst,nameMiddle, nameLast,track2)); //add it to output List
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "There was an error parsing the file:" + e.getMessage());
            return null;
        }
        return arrayList;
    }
    
    /*
    * parses the track 2 data
    */
    private void parseTrack2Data(ArrayList<User> list)
    {
        for(User u: list)
        {
            String temp = u.track2;
            
            u.setAccount(temp.substring(1, u.track2.indexOf('=')));//get account number
            temp = u.track2.substring(u.track2.indexOf('=') + 1 );//skip to the Expiration Date
            
            String expYear = temp.substring(0,2);//get expiration year
            u.setExpYear(expYear);
            
            String expMonth = temp.substring(2,4);//get expiration year
            u.setExpMonth(expMonth);
            
            temp = temp.substring(4);//skip to the serviceCode
            u.setServiceCode(temp.substring(0, 3));//get service code            
        }
    }
    
    /*
    * Adds data to the jTable
    */
    private void AddToTable(ArrayList<User> list)
    {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        
        for(User u: list)//for each elemeint in the ArrayList
        {
            model.addRow(new Object[]{u.getNameFirst(), u.getNameMiddle(), u.getNameLast(),
                u.getAccount(), u.getExpMonth(), u.getExpYear(), u.getServiceCode()}); //Add object to jTable
        }
    
    }
    private void AddDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDataButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        int rowCount = model.getRowCount();
        if(rowCount > 0)
        {
            int dialogResult = JOptionPane.showConfirmDialog (null, "Would you like to remove all previous data?","Warning",JOptionPane.YES_NO_OPTION);
            if(dialogResult == JOptionPane.YES_OPTION)
            {
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }
            }
            else
            {
                return;
            }
        }
        
        JFileChooser fileChooser = new JFileChooser();//Create a File Chooser object
        
        javax.swing.filechooser.FileFilter filter = new FileNameExtensionFilter(
        "XML files", "xml"); //Only take xml files
        fileChooser.setFileFilter(filter);
        
        File file = null;
        try
        {
            int returnVal = fileChooser.showOpenDialog(Track2ParserGUI.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile();//Get the file
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "There was an error opening the file:" + e.getMessage());
            return;
        }
        
        ArrayList list = parseXML(file);
        if(list != null)
        {
            parseTrack2Data(list);
            AddToTable(list);
        }
        
    }//GEN-LAST:event_AddDataButtonActionPerformed

    /*
    * Exports jTable to SQLite database
    */
    private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportButtonActionPerformed
        
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        
        if(model.getRowCount() == 0)//If data has not been loaded
        {
            JOptionPane.showMessageDialog(null, "No data to export.");
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File("track2.db"));// track2.db is the default name
        int returnVal = fileChooser.showSaveDialog(Track2ParserGUI.this);
        String savePath = "";
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            savePath = fileChooser.getSelectedFile().toPath().toString();//Get the file
            
        } else {
            return;
        }
        
        if(!savePath.contains("."))
            savePath = savePath + ".db"; //if no extension was specified
        else if(!savePath.endsWith(".db"))
            savePath = savePath.substring(0, savePath.indexOf(".")) + ".db"; //if extension is not db, then replace it
        
        exportLabel.setText("Please wait while the database is being created...");
        exportLabel.paintImmediately(exportLabel.getVisibleRect());
        
        Connection c = null;
        Statement s = null;
        try {
            Class.forName("org.sqlite.JDBC");
            c = DriverManager.getConnection("jdbc:sqlite:" + savePath);  
            s = c.createStatement();
            
            DatabaseMetaData md = c.getMetaData();
            ResultSet rs = md.getTables(null, null, "USERS", null);
            if(!rs.next()) //create table if it does not exist
            {
                String sql = "CREATE TABLE USERS " +
                   "(ID INT PRIMARY KEY     NOT NULL, " +
                   " FIRST_NAME     TEXT    NOT NULL, " + 
                   " MIDDLE_NAME    TEXT    NOT NULL, " + 
                   " LAST_NAME      TEXT    NOT NULL, " + 
                   " ACCOUNT        TEXT    NOT NULL, " + 
                   " EXP_MONTH      TEXT    NOT NULL, " + 
                   " EXP_YEAR       TEXT    NOT NULL, " + 
                   " SERVICE_CODE   TEXT    NOT NULL)"; 
                s.executeUpdate(sql);
            }
            else //clear table if it already exists
            {
                String sql = "DELETE FROM USERS";
                s.executeUpdate(sql);
            }

            for(int i = 0;i < model.getRowCount();i++) { //Adds data to the Table
                String nameFirst    = model.getValueAt(i, 0).toString();
                String nameMiddle   = model.getValueAt(i, 1).toString();
                String nameLast     = model.getValueAt(i, 2).toString();
                String account      = model.getValueAt(i, 3).toString();
                String expMonth     = model.getValueAt(i, 4).toString();
                String expYear      = model.getValueAt(i, 5).toString();
                String serviceCode  = model.getValueAt(i, 6).toString();
                
                String sql = "INSERT INTO USERS (ID,FIRST_NAME, MIDDLE_NAME, LAST_NAME,ACCOUNT,EXP_MONTH,EXP_YEAR,SERVICE_CODE) " +
                   "VALUES (" + i + ", '" + nameFirst + "', '" + nameMiddle + "', '" + nameLast + "', '" + account +"', '" + 
                   expMonth + "', '" + expYear + "', '" + serviceCode + "' );"; 
                s.executeUpdate(sql);
            }

            s.close();
            c.close();
            exportLabel.setText("");
            JOptionPane.showMessageDialog(null, "Database exported successfully");
        }
        catch (Exception e)
        {
          exportLabel.setText("");
          JOptionPane.showMessageDialog(null, "Error exporting to database " + e.getMessage() );
          return;
        }
    }//GEN-LAST:event_ExportButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Track2ParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Track2ParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Track2ParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Track2ParserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Track2ParserGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDataButton;
    private javax.swing.JButton ExportButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
